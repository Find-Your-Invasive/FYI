def Neural (array, code):
    from sqlalchemy import create_engine
    import pymysql
    import pandas as pd

    db_connection_str = 'mysql+pymysql://admin:findyourinvasive@fyidev.cj4ghwejxvaa.us-east-2.rds.amazonaws.com/findyourinvasivedev'
    db_connection = create_engine(db_connection_str)

    name = "2var" + code + "a"
    dataset = pd.read_sql('SELECT * FROM ' + name, con=db_connection)

    print(dataset.head())
    X = dataset.iloc[:, 0:9]
    y = dataset.iloc[:, 9]
    print (y.head ())

    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10)

    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(X_train)

    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)

    from sklearn.neural_network import MLPClassifier
    mlp = MLPClassifier(hidden_layer_sizes=(10, 10, 10), max_iter=1000)
    mlp.fit(X_train, y_train.values.ravel())

    predictions = mlp.predict(X_test)

    from sklearn.metrics import classification_report, confusion_matrix
    print(confusion_matrix(y_test, predictions))
    print(classification_report(y_test, predictions))

    pred = [[float (array[0]), float (array[1]), float (array[2]), float (array[3]), float (array[4]), float (array[5]), float (array[6]), float (array[7]), float (array[8])]]
    finalpred = mlp.predict(pred)
    thepred = mlp.predict_proba(pred)
    print(finalpred)
    print(thepred)
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
    print(accuracy_score(y_test, predictions))
    newarr = thepred[0]
    print (newarr)
    return float (newarr [1])

def futureNeural (array, code):
    from sqlalchemy import create_engine
    import pymysql
    import pandas as pd

    db_connection_str = 'mysql+pymysql://admin:findyourinvasive@fyidev.cj4ghwejxvaa.us-east-2.rds.amazonaws.com/findyourinvasivedev'
    db_connection = create_engine(db_connection_str)

    name = "future2var" + code + "a"
    dataset = pd.read_sql('SELECT * FROM ' + name, con=db_connection)

    print(dataset.head())
    X = dataset.iloc[:, 0:7]
    y = dataset.iloc[:, 7]
    print (y.head ())

    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10)

    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(X_train)

    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)

    from sklearn.neural_network import MLPClassifier
    mlp = MLPClassifier(hidden_layer_sizes=(10, 10, 10), max_iter=1000)
    mlp.fit(X_train, y_train.values.ravel())

    predictions = mlp.predict(X_test)

    from sklearn.metrics import classification_report, confusion_matrix
    print(confusion_matrix(y_test, predictions))
    print(classification_report(y_test, predictions))

    pred = [[float (array[0]), float (array[1]), float (array[2]), float (array[3]), float (array[4]), float (array[5]), float (array[6])]]
    finalpred = mlp.predict(pred)
    thepred = mlp.predict_proba(pred)
    print(finalpred)
    print(thepred)
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
    print(accuracy_score(y_test, predictions))
    newarr = thepred[0]
    print (newarr)
    return float (newarr [1])
